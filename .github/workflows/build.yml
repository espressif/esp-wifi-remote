name: "Build"

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened, labeled]

jobs:
  build_wifi_remote:
    if: contains(github.event.pull_request.labels.*.name, 'wifi_remote') || github.event_name == 'push'
    name: Build WiFi Remote Test
    strategy:
      matrix:
        idf_ver: ["latest", "release-v5.5", "release-v5.4", "release-v5.3"]
        test: [ { app: smoke_test, path: "test/smoke_test" }]
    runs-on: ubuntu-latest
    container: espressif/idf:${{ matrix.idf_ver }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Checkout protocols
        uses: actions/checkout@v3
        with:
          repository: espressif/esp-protocols
          ref: wifi_remote-v0.4.0
          sparse-checkout: |
            ci/build_apps.py
            ci/ignore_build_warnings.txt
          sparse-checkout-cone-mode: false
          path: protocols
      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
            key: ${{ matrix.idf_ver }}
      - name: Build ${{ matrix.test.app }} with IDF-${{ matrix.idf_ver }}
        shell: bash
        run: |
          . ${IDF_PATH}/export.sh
          pip install idf-component-manager idf-build-apps --upgrade
          python ./components/esp_wifi_remote/scripts/generate_slave_configs.py ./components/esp_wifi_remote/${{matrix.test.path}}
          python $GITHUB_WORKSPACE/protocols/ci/build_apps.py ./components/esp_wifi_remote/${{matrix.test.path}} -vv --preserve-all

  build_wifi_remote_example:
    name: Build WiFi Remote Example
    strategy:
      matrix:
        idf_ver: ["latest"]
        example: [ { app: host, path: "examples/mqtt", bin: "build_esp32p4_p4" } , { app: 2sta, path: "examples/two_stations", bin: "build_esp32s3_s3" }, { app: slave, path: "examples/server", bin: "build_esp32c6_c6" }]

    runs-on: ubuntu-latest
    container: espressif/idf:${{ matrix.idf_ver }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Checkout protocols
        uses: actions/checkout@v3
        with:
          repository: espressif/esp-protocols
          ref: wifi_remote-v0.4.0
          sparse-checkout: |
            ci/build_apps.py
            ci/ignore_build_warnings.txt
            ci/clean_build_artifacts.sh
          sparse-checkout-cone-mode: false
          path: protocols
      - name: Build ${{ matrix.example.app }} with IDF-${{ matrix.idf_ver }}
        env:
          EXPECTED_WARNING: "Warning: The smallest app partition is nearly full"
        shell: bash
        run: |
          . ${IDF_PATH}/export.sh
          pip install idf-component-manager idf-build-apps --upgrade
          python $GITHUB_WORKSPACE/protocols/ci/build_apps.py ./components/esp_wifi_remote/${{matrix.example.path}} -vv --preserve-all
          cd ./components/esp_wifi_remote/${{matrix.example.path}}
          ${GITHUB_WORKSPACE}/protocols/ci/clean_build_artifacts.sh `pwd`/${{matrix.example.bin}}
          zip -qur artifacts.zip ${{matrix.example.bin}}
      - uses: actions/upload-artifact@v4
        with:
          name: eppp_${{ matrix.idf_ver }}_${{matrix.example.bin}}
          path: components/esp_wifi_remote/${{matrix.example.path}}/artifacts.zip
          if-no-files-found: error

  run_example:
    # Skip running on forks since it won't have access to secrets
    if: github.repository == 'espressif/esp-wifi-remote'
    name: EPP target test
    needs: build_wifi_remote_example
    strategy:
      matrix:
        idf_ver: ["latest"]
    runs-on: [self-hosted, wifi-remote]
    container:
      image: python:3.7-buster
      options: --privileged # Privileged mode has access to serial ports
    env:
      TEST_DIR: components/esp_wifi_remote/examples
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: eppp_${{ matrix.idf_ver }}_build_esp32p4_p4
          path: ${{ env.TEST_DIR }}/mqtt/
      - uses: actions/download-artifact@v4
        with:
          name: eppp_${{ matrix.idf_ver }}_build_esp32c6_c6
          path: ${{ env.TEST_DIR }}/server/
      - name: Run Test
        working-directory: ${{ env.TEST_DIR }}
        run: |
          python -m pip install pytest-embedded-serial-esp pytest-embedded-idf pytest-rerunfailures pytest-timeout pytest-ignore-test-results
          unzip server/artifacts.zip -d server/
          mv server/build_esp32c6_c6/ server/build/
          unzip mqtt/artifacts.zip -d mqtt/
          mv mqtt/build_esp32p4_p4/ mqtt/build/
          python -m pytest --log-cli-level DEBUG --target esp32p4,esp32c6
